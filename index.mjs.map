{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport nextGraphemeClusterBreak from '@stdlib/string-next-grapheme-cluster-break';\n\n\n// MAIN //\n\n/**\n* Invokes a callback once for each (visual) character of a string.\n*\n* @param {string} str - input string\n* @param {Function} clbk - function to invoke\n* @param {*} [thisArg] - execution context\n* @throws {TypeError} first argument must be a string primitive\n* @throws {TypeError} second argument must be a function\n* @returns {string} input string\n*\n* @example\n* function log( value, index, str ) {\n*     console.log( '%s: %d', index, value );\n* }\n*\n* var str = 'Hello';\n*\n* forEach( str, log );\n*/\nfunction forEach( str, clbk, thisArg ) {\n\tvar len;\n\tvar idx;\n\tvar brk;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'null3R', str ) );\n\t}\n\tif ( !isFunction( clbk ) ) {\n\t\tthrow new TypeError( format( 'null2S', clbk ) );\n\t}\n\tif ( str === '' ) {\n\t\treturn '';\n\t}\n\n\tidx = 0;\n\tlen = str.length;\n\twhile ( idx < len ) {\n\t\t// Find out where the next grapheme cluster begins:\n\t\tbrk = nextGraphemeClusterBreak( str, idx );\n\n\t\t// -1 only when end of string is reached...\n\t\tif (brk === -1) {\n\t\t\tbrk = len;\n\t\t}\n\n\t\t// Invoke the clbk on the cluster:\n\t\tclbk.call( thisArg, str.substring(idx, brk), idx, str );\n\n\t\t// Hop onto the beginning of the next cluster:\n\t\tidx = brk;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default forEach;\n"],"names":["forEach","str","clbk","thisArg","len","idx","brk","isString","TypeError","format","isFunction","length","nextGraphemeClusterBreak","call","substring"],"mappings":";;gYAiDA,SAASA,EAASC,EAAKC,EAAMC,GAC5B,IAAIC,EACAC,EACAC,EACJ,IAAMC,EAAUN,GACf,MAAM,IAAIO,UAAWC,EAAQ,SAAUR,IAExC,IAAMS,EAAYR,GACjB,MAAM,IAAIM,UAAWC,EAAQ,SAAUP,IAExC,GAAa,KAARD,EACJ,MAAO,GAKR,IAFAI,EAAM,EACND,EAAMH,EAAIU,OACFN,EAAMD,IAKA,KAHbE,EAAMM,EAA0BX,EAAKI,MAIpCC,EAAMF,GAIPF,EAAKW,KAAMV,EAASF,EAAIa,UAAUT,EAAKC,GAAMD,EAAKJ,GAGlDI,EAAMC,EAEP,OAAOL,CACR"}